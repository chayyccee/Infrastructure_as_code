Description: >
  To deploy SecurityGroup,Elastic IP, LaunchConfiguration, AutoScalingGroup,
  LoadBalancer, Listener, ListenerRule, TargetGroup.
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  AMItoUse:
    Description: AMI to use for our base image
    Type: String
    Default: ami-005de95e8ff495156

Resources:
  # IAM Role to allow EC2 Session Manager to access our server
  RoleForS3ccess:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  Policies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'root'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - "ssm:Get*"
          - "s3:Get*"
          Resource: '*'
      Roles:
      - !Ref RoleForS3ccess

# Instance Profile
  ServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref RoleForS3ccess

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  ##

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Sub "${EnvironmentName}-VPCID"

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
    - WebServerSecGroup
    Properties:
      IamInstanceProfile: !Ref ServerInstanceProfile
      ImageId: !Ref AMItoUse
      InstanceType: t3.small
      #SecurityGroupIds: !Ref WebServerSecGroup
      #SubnetId: 
      #  Fn::ImportValue: 
      ##    Sub "${EnvironmentName}-PUB1-SN"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
            DeleteOnTermination: true
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Host

  EC2InstanceEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      AllocationId: !GetAtt ElasticIp.AllocationId

##

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Sub ${EnvironmentName}-VPCID

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      #UserData:
      #  Fn::Base64: !Sub |
      #    #!/bin/bash
      #    sudo apt-get update -y
      #    sudo apt-get install apache2 -y
      #    sudo systemctl start apache2.service
      UserData: !Base64 |
        #!/bin/bash -x
        apt-get update -y
        apt-get install apache2 -y
        systemctl start apache2.service
      EbsOptimized: true          
      ## ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: !Ref AMItoUse
      IamInstanceProfile: !Ref ServerInstanceProfile
      # ToDo: Change the key-pair name, as applicable to you. 
      # KeyName: nd9990_keypair
      SecurityGroups: 
      - !Ref WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: /dev/sdk
        Ebs:
          VolumeSize: 10
          DeleteOnTermination: true
          VolumeType: "gp2"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
       - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      DesiredCapacity: '2'
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - !Ref WebAppTargetGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True

  WebAppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppGroup
      Cooldown: '300'
      ScalingAdjustment: 1

  #ScalingDown
  WebAppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppGroup
      Cooldown: '300'
      ScalingAdjustment: -1

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
      - !Ref LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

Outputs:

#  WebAppLBURL:
#    Description: The Load Balancer URL
#    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName,]]
#    Export:
#      Name: !Sub ${EnvironmentName}-DNS-NAME
  RoleForS3ccess:
    Description: IAM role for app
    Value: !Ref RoleForS3ccess
    Export:
      Name: !Sub ${EnvironmentName}-ROL-IAM

  InstanceProfile:
    Description: This is the instance profile of the role
    Value: !Ref ServerInstanceProfile
    Export:
      Name: !Sub ${EnvironmentName}-INS-PROFILE